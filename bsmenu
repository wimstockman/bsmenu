#!/bin/bash
# BSmenu: a bash menu selector
# Author: Wim Stockman 
# e-mail: wim.stockman@gmail.com 
# source: https://github.com/wimstockman/BSmenu
# Context:
# inspired by dylanaraps fff program to create a pure bash menu selector https://github.com/dylanaraps/fff
# and inspired by suckless slmenu and suckless dmenu https://suckless.org
# Program Information:
# it reads lines from stdin and display them in a selectable lines
# after selecting the line with enter it gets printed to stdout
PRGN="${0##*/}"
VRSN=0.0.1
# Default MenuItem Seperator is "New Line" "\n"
#
# Navigation is 
# 	UP arrow 	move up a line
#	DOWN arrow 	move down a line
#	j		move up a line
#	k		move down a line
#	Enter Key	Select Line
#	q		Quit without selecting anything
####################################################################################################################

setup_terminal() {
    # Setup the terminal for the TUI.
    # '\e[?1049h': Use alternative screen buffer.
    # '\e[?7l':    Disable line wrapping.
    # '\e[?25l':   Hide the cursor.
    # '\e[2J':     Clear the screen.
    # '\e[1;Nr':   Limit scrolling to scrolling area.
    #              Also sets cursor to (0,0).
    printf '\e[?1049h\e[?7l\e[?25l\e[2J\e[1;%sr' "$max_items"

    # Hide echoing of user input
    stty -echo
}

reset_terminal() {
    # Reset the terminal to a useable state (undo all changes).
    # '\e[?7h':   Re-enable line wrapping.
    # '\e[?25h':  Unhide the cursor.
    # '\e[2J':    Clear the terminal.
    # '\e[;r':    Set the scroll region to its default value.
    #             Also sets cursor to (0,0).
    # '\e[?1049l: Restore main screen buffer.
    printf '\e[?7h\e[?25h\e[2J\e[;r\e[?1049l'

    # Show user input.
    stty echo
     [[ ! -z ${list+x} ]] && exec 1>&3 && printf '%s\n' ${list[scroll]} 
}

clear_screen() {
    # Only clear the scrolling window (dir item list).
    # '\e[%sH':    Move cursor to bottom of scroll area.
    # '\e[9999C':  Move cursor to right edge of the terminal.
    # '\e[1J':     Clear screen to top left corner (from cursor up).
    # '\e[2J':     Clear screen fully (if using tmux) (fixes clear issues).
    # '\e[1;%sr':  Clearing the screen resets the scroll region(?). Re-set it.
    #              Also sets cursor to (0,0).
    printf '\e[%sH\e[9999C\e[1J%b\e[1;%sr' \
           "$((LINES-2))" "${TMUX:+\e[2J}" "$max_items"
}
get_term_size() {
    # Get terminal size ('stty' is POSIX and always available).
    # This can't be done reliably across all bash versions in pure bash.
#    read -r LINES COLUMNS < <(stty size)

    # Max list items that fit in the scroll area.
    ((max_items=LINES-3))
}
status_line()
{
    printf '\e7\e[%sH\e[3%s;4%sm%*s\r%s %s%s\e[m\e[%sH\e[K\e8' \
	    "$((LINES-1))" \
           "0" \
           "4" \
           "$COLUMNS" "" \
           "($((scroll+1))/$((list_totals+1)))" \
           "<Enter> Select | j-k: Up and Down | g-G: Goto Top-Bottom | " \
           "q: Quit"  \
	   "$LINES" 
}
rd_items(){
scroll=0
IFS=$'\n'
while read line
do 
list+=("$line")
done <"${1:-/dev/stdin}"

if [ "$delim" != "" ] # if delimiter specified split lines on delimiter
then
{
IFS="$delim" read -a myarray <<< ${list[@]}
list=("${myarray[@]}")
}
fi
((list_totals=${#list[@]}))
}

print_items(){
local i=0
[[ $1 == last ]] && {
printf '\e[H'
for ((i=list_totals-max_items-1;i<list_totals;i++)); {
	print_line "$i"
	printf '\n'
} 
}
[[ $1 != last ]] && {
for ((i=scroll;i<max_items-1+scroll;i++)); {
	print_line "$i"
	printf '\n'
} 
printf '\e[H'
}
}
key() {
    # Handle special key presses.
    [[ $1 == $'\e' ]] && {
        read "${read_flags[@]}" -rsn 2

        # Handle a normal escape key press.
        [[ ${1}${REPLY} == $'\e\e['* ]] &&
            read "${read_flags[@]}" -rsn 1 _

        local special_key=${1}${REPLY}
    }

    case ${special_key:-$1} in

        # Scroll down.
        # 'B' is what bash sees when the down arrow is pressed
        # ('\e[B' or '\eOB').
        j|\
        $'\e[B'|\
        $'\eOB')
		((scroll < list_totals-1)) && {
			((scroll++))
                ((y < max_items)) && ((y++))
                print_line "$((scroll-1))"
                printf '\n'
                print_line "$scroll"
		status_line
           } 
        ;;

        # Scroll up.
        # 'A' is what bash sees when the up arrow is pressed
        # ('\e[A' or '\eOA').
        k|\
        $'\e[A'|\
        $'\eOA')
            # '\e[1L': Insert a line above the cursor.
            # '\e[A':  Move cursor up a line.
            ((scroll > 0)) && {
                ((scroll--))
                print_line "$((scroll+1))"
                if ((y < 2)); then
                    printf '\e[L'
                else
                    printf '\e[A'
                    ((y--))
                fi

                print_line "$scroll"
		status_line
            }
        ;;
	g) #Go To Top
		((scroll != 0)) && {
		scroll=0	
		y=0
		clear_screen
		print_items
		status_line
		}
	;;
	G) #Goto Bottom
		((scroll != list_totals )) && {
		((scroll=list_totals))
		((y=max_items))
		print_items last
		status_line
		}
	;;
	"")
	exit
	;;
	
	q) 
	unset list
	exit
	;;
	esac
}

print_line() {
        format=\\e[${ex:-01;32}m
	(($1 == scroll)) && format="\\e[1;32;7m"
	printf '\r%b%s\e[m\r' \
	"${format}"${list[$1]}

}
setdelim() {
	case $1 in
	\\t)  
	delim=$'\t'
	;;
	?) 
	delim=$1
	;;
	esac
}
usage() {
cat<<END
$PRGN (v. $VRSN): A Bash Menu Selector
Usage: 
	$PRGN [-h]: 
	$PRGN [-d] [menu_item_file]
	Options:
		-d 	set elimiter (default is Newline, for tabs use "\t")
		-h	Usage
	
	Output is sent to STDOUT
END
}

# Main    

delim=""
optstring="d:h"
while getopts ${optstring} arg; do
	case ${arg} in
	d) 
	setdelim $OPTARG
	;;
	h) 
	usage
	exit 0
	;;
	?)
	printf 'Invalid option:%s' ${optarg}
	exit 2
	;;
	esac
done	
shift "$(($OPTIND -1))"

rd_items $1 		# read from file or stdin
exec 0< /dev/tty 	# redirect stdinput back to tty so we can capture users keyboard input
exec 3>&1		# copy the stdoutput to file descriptor 3
exec 1> /dev/tty 	# reopen stdoutput to tty so we can see our menu displayed
setup_terminal
get_term_size
clear_screen
print_items
status_line
printf '\e[H'
    trap 'reset_terminal' EXIT
    # Vintage infinite loop.
    for ((;;)); {
        read "${read_flags[@]}" -srn 1 && key "$REPLY"

        # Exit if there is no longer a terminal attached.
        [[ -t 1 ]] || exit 1
    }
reset_terminal;
